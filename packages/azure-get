#!/usr/bin/env bash
# [[file:packages.org::*Argument processor][Argument processor:1]]
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables

die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

begins_with_short_option() {
	local first_option all_short_options='t'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_token=

print_help() {
	printf 'Usage: %s [-t|--token <arg>] [--help] [--] <url>\n' "$0"
	printf '\t%s\n' "<url>: api url"
	printf '\t%s\n' "-t, --token: Azure API Auth Token (no default)"
	printf '\t%s\n' "--help: Prints help"
	printf '\nEnvironment variables that are supported:\n'
	printf '\t%s\n' "AZ_TOKEN: Default azure token."

}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_key="$1"
		if test "$_key" = '--'; then
			shift
			test $# -gt 0 || break
			_positionals+=("$@")
			_positionals_count=$((_positionals_count + $#))
			shift $(($# - 1))
			_last_positional="$1"
			break
		fi
		case "$_key" in
		-t | --token)
			test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
			_arg_token="$2"
			shift
			;;
		--token=*)
			_arg_token="${_key##--token=}"
			;;
		-t*)
			_arg_token="${_key##-t}"
			;;
		--help)
			print_help
			exit 0
			;;
		*)
			_last_positional="$1"
			_positionals+=("$_last_positional")
			_positionals_count=$((_positionals_count + 1))
			;;
		esac
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="'url'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_url "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# Argument processor:1 ends here

# [[file:packages.org::*Token validation][Token validation:1]]
test -z "$AZ_TOKEN" -a -z "$_arg_token" && {
	print_help
	echo 'FATAL ERROR: Either $AZ_TOKEN --token must provide a valid token.'
	exit 1
}
token=${_arg_token:-$AZ_TOKEN}
# Token validation:1 ends here

# [[file:packages.org::*Script][Script:1]]
# shellcheck disable=SC2154
curl -X GET -u :"$token" "$_arg_url"
# Script:1 ends here
