#+title: Packages
#+author: Gary Glover
#+startup: content
#+PROPERTY: header-args :eval no

* Shared functions
*** Temp files
We sometimes need to use temp files for storing information. After the
scripts are finished we would like to automatically clean up.
#+name: auto_clean_temp_file
#+begin_src bash
  temp_files=()
  function get_auto_clean_temp_file() {
  	local var_name="$1"
  	readonly "$var_name=$(mktemp || exit 1)"
  	temp_files+=("${!var_name}")
  }
  # shellcheck disable=SC2154
  trap 'for file in "${temp_files[@]}"; do rm -f -- "$file"; done' EXIT SIGINT
#+end_src
*** Default spinner
Long functions can appear unresponsive. Give some visual feedback that
those we are waiting on their completion.
#+name: spinner
#+begin_src bash
  function spinner() {
  	if [[ ${SPINNER_DEBUG-FALSE} == "TRUE" ]]; then
  		echo "Debug: " "$1" >&2
  	fi
  	gum spin --spinner points --title "$@"
  }
#+end_src

* Local Nix packages
#+begin_src nix :tangle packages.nix :comments link
  { pkgs, ... }:
  {
    inherit (import ./ak9s.nix { inherit pkgs; }) ak9s;
    inherit (import ./devops-clone.nix { inherit pkgs; }) devops-clone;
    inherit (import ./e.nix { inherit pkgs; }) e;
    inherit (import ./azure-tools.nix { inherit pkgs; }) azure-tools;
  }
#+end_src
* azure-tools
** azure token
:PROPERTIES:
:header-args:bash: :tangle azure-token :shebang #!/usr/bin/env bash :comments link
:END:
*** Argument template
#+name: azure-token-args
#+begin_src bash :tangle no :eval yes :results output code
  argbash --strip all - <<EOF | shfmt -
  # ARG_HELP(, , , )
  # ARGBASH_GO
  EOF
#+end_src

*** Argument processor
#+begin_src bash :noweb yes :tangle no
  <<azure-token-args()>>
#+end_src
*** Get token
#+begin_src bash :noweb yes
  <<spinner>>
#+end_src

#+begin_src bash
  cached_expiry=$(skate get token-expiry@azure-tools 2>/dev/null)
  test -z "$cached_expiry" -o "1$cached_expiry" -lt "1$(date +%s)" && {
  	token_json=$(spinner "Getting Azure Rest Token" -- \
  		az account get-access-token -o json) || exit 1
  	token=$(echo "$token_json" | jq -r '.accessToken')
  	expiry=$(echo "$token_json" | jq -r '.expires_on')
  	skate set token@azure-tools "$token"
  	skate set token-expiry@azure-tools "$expiry"
  }

  skate get token@azure-tools
#+end_src

** azure get
:PROPERTIES:
:header-args:bash: :tangle azure-get :shebang #!/usr/bin/env bash :comments link
:END:
*** Argument template
#+name: azure-get-args
#+begin_src bash :tangle no :eval yes :results output code
  argbash --strip all - <<EOF | shfmt -
  # ARG_OPTIONAL_SINGLE([token], t, [Azure API Auth Token], )
  # ARG_POSITIONAL_DOUBLEDASH()
  # ARG_POSITIONAL_SINGLE([url], [api url], )
  # ARG_HELP(, , , )
  # ARGBASH_GO
  EOF
#+end_src

*** Argument processor
#+begin_src bash :noweb yes
  <<azure-get-args()>>
#+end_src

*** Token validation
#+begin_src bash
  token="$_arg_token"
  test -z "$token" && {
  	token=$(azure-token) || exit 1
  }
#+end_src

*** Script
#+begin_src bash
  # shellcheck disable=SC2154
  curl -s -X GET -H "Authorization: Bearer $token" "$_arg_url"
#+end_src
** nix derivation
#+begin_src nix :tangle azure-tools.nix :comments link
  { pkgs, ... }:
  let
    azure-token = pkgs.writeShellApplication {
      name = "azure-token";
      runtimeInputs = with pkgs; [ skate ];
      text = builtins.readFile ./azure-token;
    };
    azure-get = pkgs.writeShellApplication {
      name = "azure-get";
      runtimeInputs = with pkgs; [ curl ];
      text = builtins.readFile ./azure-get;
    };
  in
  {
    azure-tools = pkgs.stdenv.mkDerivation {
      name = "azure-tools";
      buildInputs = [
        azure-get
      ];
      buildCommand = ''
        mkdir -p $out/bin
        ln -s ${azure-token}/bin/azure-token $out/bin/
        ln -s ${azure-get}/bin/azure-get $out/bin/
      '';
    };
  }
#+end_src

* ak9s
:PROPERTIES:
:header-args:bash: :tangle ak9s :shebang #!/usr/bin/env bash :comments link
:END:
** script
*** Init
#+begin_src bash :noweb yes
  <<auto_clean_temp_file>>
  <<spinner>>
#+end_src
*** Banner
#+begin_src bash
  gum style \
  	--foreground 212 --border-foreground 212 --border double \
  	--align center --width 50 --margin "1 2" --padding "2 4" \
  	'K9S Runner for AKS Clusters'
#+end_src

*** AZ Account List
Get the account list from Azure and write to temp file. Show spinner
whilst waiting.
#+begin_src bash
  AZ_ACCOUNT_LIST=$(spinner "Getting Azure accounts" -- \
  	az account list --only-show-errors -o json) || exit 1
  readonly AZ_ACCOUNT_LIST
#+end_src

*** Select subscription
Filter for the subscription names
#+begin_src bash
  SUBSCRIPTION=$(echo "$AZ_ACCOUNT_LIST" | jq -r '.[].name' | gum filter --sort --height 20) || exit 1
  readonly SUBSCRIPTION
#+end_src

*** Get Kubernetes clusters
Get all of the AKS clusters in the subscription
#+begin_src bash
  AKS_LIST=$(spinner "Getting Clusers" -- \
  	az aks list --only-show-errors --subscription "$SUBSCRIPTION" -o json) || exit 1
#+end_src

*** Select cluster
Filter for running clusters, then prompt for cluster to connect to.
#+begin_src bash
  CLUSTER=$(echo "$AKS_LIST" | jq -r '.[] | select(.powerState.code == "Running") | .name' |
  	gum filter --sort --height 20) || exit 1
  readonly CLUSTER
#+end_src

*** Get resource group
Pull resource group for named cluster from the az aks list output.
#+begin_src bash
  RESOURCE_GROUP=$(echo "$AKS_LIST" | jq -r --arg CLUSTER "$CLUSTER" '.[] | select(.name == $CLUSTER) | .resourceGroup') || exit 1
  readonly RESOURCE_GROUP
#+end_src

*** Login to cluster
#+begin_src bash
  get_auto_clean_temp_file TEMP_CONTEXT || exit 1
  spinner "Logging into $CLUSTER" -- \
  	az aks get-credentials --only-show-errors --name "$CLUSTER" --resource-group "$RESOURCE_GROUP" --subscription "$SUBSCRIPTION" --file "$TEMP_CONTEXT" || exit 1
#+end_src

*** Load K9S
#+begin_src bash
  k9s -A --kubeconfig "$TEMP_CONTEXT" --insecure-skip-tls-verify
#+end_src

** nix derivation
#+begin_src nix :tangle ak9s.nix :comments link
  { pkgs, ... }:
  {
    ak9s = pkgs.writeShellApplication {
      name = "ak9s";
      runtimeInputs = with pkgs; [
        k9s
        azure-cli
        gum
        jq
        kubectl
      ];
      text = builtins.readFile ./ak9s;
    };
  }
#+end_src

* devops-clone
:PROPERTIES:
:header-args:bash: :tangle devops-clone :shebang #!/usr/bin/env bash :comments link
:END:

** script
*** Init
#+begin_src bash :noweb yes
  <<spinner>>
#+end_src
*** Banner
#+begin_src bash
  gum style \
  	--foreground 212 --border-foreground 212 --border double \
  	--align center --width 50 --margin "1 2" --padding "2 4" \
  	'Azure DevOps repo git cloner'
#+end_src

*** Get Organisation
#+begin_src bash
  DEVOPS_CONFIG=$(spinner "Checking DevOps Organisation" -- \
  	az devops configure --list | grep "^organization\s*=\s*[a-zA-Z]") || {
  	gum log --time rfc822 --structured --level error No default DevOps organistation set.
  	exit 1
  }
  readonly DEVOPS_CONFIG

  DEVOPS_URL=$(echo "$DEVOPS_CONFIG" | sed -n 's/^organization\s*=\s*\(.*\)/\1/p')
  readonly DEVOPS_URL
  DEVOPS_ORG=$(basename "$DEVOPS_URL")
  readonly DEVOPS_ORG
#+end_src

*** Get Projects
#+begin_src bash
  DEVOPS_PROJECTS=$(spinner "Getting Projects" -- \
  	azure-get "$DEVOPS_URL/_apis/projects?api-version=7.2-preview.4") || exit 1
  readonly DEVOPS_PROJECTS

  PROJECT=$(echo "$DEVOPS_PROJECTS" | jq '.value.[] | .name' -r | gum filter --sort --height 20) || exit 1
  readonly PROJECT
#+end_src

*** Get Repos
#+begin_src bash
  DEVOPS_REPOS=$(spinner "Getting Repositories" -- \
  	azure-get "$DEVOPS_URL/$PROJECT/_apis/git/repositories?api-version=7.2-preview.1") || exit 1
  readonly DEVOPS_REPOS

  REPOS=()
  while IFS= read -r repo; do
  	REPOS+=("$repo")
  done < <(echo "$DEVOPS_REPOS" | jq '.value[].name' -r | gum filter --sort --height 20 --no-limit) || exit 1
  readonly REPOS
#+end_src

*** Download Type
#+begin_src bash
  DOWNLOAD_TYPE=$(gum filter --header "Download method: " https ssh | sed 's/^ssh$/sshUrl/; s/^https$/remoteUrl/')
#+end_src

*** Download
#+begin_src bash
  for repo in "${REPOS[@]}"; do
  	path="$HOME/git-clones/$DEVOPS_ORG/$PROJECT/$repo"
  	if [ -d "$path" ]; then
  		function update_repo() {
  			pushd "$path">/dev/null || return 0
  			spinner "Updating $PROJECT/$repo" -- \
  				- git fetch --prune --prune-tags --tags --force || {
  				popd>/dev/null || return 0
  				return 0
  			}
  			branch="$(git remote show origin | awk '/HEAD branch/{print $NF}')"
  			spinner "Updating $PROJECT/$repo" -- \
  				git checkout "$branch" || {
  				popd>/dev/null || return 0
  				return 0
  			}
  			spinner "Updating $PROJECT/$repo" -- \
  				git reset --hard "origin/$branch" || {
  				popd>/dev/null || return 0
  				return 0
  			}
  			popd>/dev/null || return 0
  		}
  		update_repo
  	else
  		url=$(echo "$DEVOPS_REPOS" | jq --arg repo "$repo" --arg type "$DOWNLOAD_TYPE" -r '.value[] | select(.name==$repo) | .[$type]')
  		spinner "Downloading $PROJECT/$repo" -- \
  			git clone "$url" "$path" --origin origin || true
  	fi
  done
#+end_src

** nix derivation
#+begin_src nix :tangle devops-clone.nix :comments link
  { pkgs, ... }:
  let
    local-pkgs = (import ./packages.nix { inherit pkgs; });
  in
  {
    devops-clone = pkgs.writeShellApplication {
      name = "devops-clone";
      runtimeInputs = with pkgs; [
        # azure-cli
        gum
        jq
        curl
        local-pkgs.azure-tools
      ];
      text = builtins.readFile ./devops-clone;
    };
  }
#+end_src

* azure-pim
:PROPERTIES:
:header-args:bash: :tangle azure-pim :shebang #!/usr/bin/env bash :comments link
:END:
** script
*** Banner
#+begin_src bash :tangle no
  gum style \
  	--foreground 212 --border-foreground 212 --border double \
  	--align center --width 50 --margin "1 2" --padding "2 4" \
  	'Azure PIM'
#+end_src
*** Init
#+begin_src bash :noweb yes
  <<spinner>>
#+end_src

*** Get Current User Principal ID
*** Get PIM
Use filter for current principal
#+begin_src bash
  azure-get "https://management.azure.com/subscriptions/78d011e3-c82d-4800-bbc0-c0bf0ae045ce/providers/Microsoft.Authorization/roleAssignments?api-version=2022-04-01"
#+end_src

* e
This is the command to change to the correct dev environment
** script
#+begin_src bash :tangle e :comments link
  echo "$HOME/dotfiles/envs/$(for dir in "$HOME/dotfiles/envs/"*/; do basename "$dir"; done | gum filter)"
#+end_src
** nix derivation
#+begin_src nix :tangle e.nix :comments link
  { pkgs, ... }:
  let
    local-pkgs = (import ./packages.nix { inherit pkgs; });
  in
  {
    e = pkgs.writeShellApplication {
      name = "e";
      runtimeInputs = with pkgs; [
        gum
        local-pkgs.azure-tools
      ];
      text = builtins.readFile ./e;
    };
  }
#+end_src
