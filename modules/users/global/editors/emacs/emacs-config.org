#+title: My Emacs Config
#+author: Gary Glover
#+property: header-args :results silent
#+STARTUP: content

To add a new programming language the following items may need
updating
- Treesitter
- Format all
- Flycheck

* General Settings
** Emacs Server
#+begin_src emacs-lisp :tangle yes
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
** Lexical Binding
Configure lexical binding for the rest of this init. A lexically-bound variable
has lexical scope, meaning that any reference to the variable must be
located textually within the binding construct.

This must be kept as the first entry in this list as documented in
"(elisp)Using Lexical Binding".

#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding: t -*-
#+end_src

** Byte compiler warnings
Silence the byte compiler warnings but still log. This is to prevent
Emaccs always displaying the \ast{}Warnings\ast{} buffer on startup.

#+begin_src emacs-lisp :tangle yes
  (use-package
   comp
   :custom native-comp-async-report-warnings-errors 'silent)
#+end_src

** Disable package downloads
Remove elpa from the package archives so that no packages will be
automatically downloaded. All packages will be installed using the nix
package manager.

#+begin_src emacs-lisp :tangle yes
  (use-package package
    :custom
    (package-archives nil "Remove all package download locations"))
#+end_src

** Window splitting
#+begin_src emacs-lisp :tangle yes
  (use-package window
    :config
    (defun split-window-max-pixels (&optional window)
      "Split WINDOW based on which directon has the most pixels."
    (let ((window (or window (selected-window))))
      (if (> (window-pixel-height window) (window-pixel-width window))
  	(or (and (window-splittable-p window)
  		 (with-selected-window window (split-window-below)))
  	    (and (window-splittable-p window t)
  		 (with-selected-window window (split-window-right)))
  	    (let ((split-height-threshold 0))
  	      (with-selected-window window (split-window-below))))
        (or (and (window-splittable-p window t)
  	       (with-selected-window window (split-window-right)))
  	  (and (window-splittable-p window)
  	       (with-selected-window window (split-window-below)))
  	  (let ((split-width-threshold 0))
  	    (with-selected-window window (split-window-right)))))))

    (setopt split-window-preferred-function #'split-window-max-pixels))
#+end_src

* Performance Settings

* Key Bindings
** Meow
This is the meow modal editing suite.

#+begin_src emacs-lisp :tangle yes
  (use-package
    meow
    :init (meow-global-mode 1)
    :config
    (add-to-list 'meow-selection-command-fallback '(meow-replace . meow-yank))
    (setopt
     meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
     meow-use-clipboard t)
    ;; Set keys for MOTION state. This is the state used in read-only style buffers like dired/help/magit
    (meow-motion-overwrite-define-key
     '("h" . meow-left)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("l" . meow-right)
     '("r" . cloveynit-global-dispatch)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Allow SPC h/j/k/l to run the original command that will be bound to H-<h/j/k/l>
     '("h" . "H-h")
     '("j" . "H-j")
     '("k" . "H-k")
     '("l" . "H-l")
     '("r" . "H-r")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     ;; Use SPC //? for accessing meow help
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-replace)
     '("q" . meow-quit)
     '("r" . cloveynit-global-dispatch)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
#+end_src
** General
#+begin_src emacs-lisp :tangle yes
  (use-package general
    :init
    (general-define-key
     :keymaps 'global-map
     "<f5>" #'standard-themes-toggle
     "M-S" #'vertico-suspend
     "C-." #'embark-act)
    (with-eval-after-load 'org
      (general-define-key
       :keymaps 'org-mode-map
       "C-M-<return>" #'org-meta-return))
    (with-eval-after-load 'corfu-candidate-overlay
      (general-define-key
       :keymaps 'corfu-candidate-overlay-completion-map
       "C-n" #'completion-at-point
       "<tab>" #'corfu-candidate-overlay-complete-at-point))
    (with-eval-after-load 'transient
      (general-define-key
       :keymaps 'transient-base-map
       "<escape>" 'transient-quit-all))
    (with-eval-after-load 'dired
      (general-define-key
       :keymaps 'dired-mode-map
       "?" 'which-key-show-major-mode))
    (with-eval-after-load 'vertico
      (general-define-key
       :keymap 'vertico-map
       "C-<return>" #'vertico-exit-input)))
#+end_src
** TODO Transient
Transient allows the creation and mapping of keybindings through
menus. Initial configuration is to tie into meow, having a
global-dispatch map available in all buffers that links to custom
package maps. In the future I shall try to create a local mode map
that applies to certian major/minor modes.

#+begin_src emacs-lisp :tangle yes
  (use-package transient
    :init
    (transient-define-prefix cloveynit-global-dispatch ()
      "Global transient menu"
      [["Default"
        ("a" "Generic" cloveynit-global-generic-dispatch)
        ("c" "Consult" cloveynit-consult-dispatch)
        ("g" "Magit" magit-dispatch)
        ("h" "Help" cloveynit-helpful-dispatch)
        ("l" "Gptel" gptel-menu)
        ("n" "Denote" cloveynit-denote-dispatch)
        ("p" "Project" cloveynit-project-dispatch)
        ("m" "Modes" cloveynit-modes-dispatch)
        ("w" "Window" cloveynit-window-dispatch)
        ]]))
#+end_src
*** Place holder transients
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-window-dispatch ()
    "Transient for managing windows"
    [["Windows"
      ]])
#+end_src
*** Global generic transient
This transient is to provide a place for common commands, that don't
fit in as part of any other group.
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-global-generic-dispatch ()
    "Global generic transient"
    [["Narrowing"
      ("n" "Narrow" narrow-to-region)
      ("w" "Widen" widen :if buffer-narrowed-p)]
     ["Editing"
      ("f" "Format" format-all-region-or-buffer)]])
#+end_src
*** Minor modes transient
#+begin_src emacs-lisp :tangle yes
  (defun cloveynit-modes-highlight (mode-symbol text)
    "Return a colored TEXT based on the status of MODE-SYMBOL."
    (if (if (fboundp mode-symbol) (symbol-value mode-symbol) nil)
        (propertize text 'face '(:foreground "green"))
      (propertize text 'face '(:foreground "red"))))

  (transient-define-prefix cloveynit-modes-dispatch ()
    "Transient for toggling minor modes."
    :transient-suffix 'transient--do-stay
    [["Modes"
      ("f" (lambda () (cloveynit-modes-highlight 'format-all-mode "Format all"))
       format-all-mode)
      ("c" (lambda () (cloveynit-modes-highlight 'flymake-mode "Flymake"))
       flymake-mode)
      ("a" (lambda () (cloveynit-modes-highlight 'aggressive-indent-mode "Aggressive Indent"))
       aggressive-indent-mode)
      ("n" (lambda () (cloveynit-modes-highlight 'column-number-mode "Column Number"))
       column-number-mode)
      ("d" (lambda () (cloveynit-modes-highlight 'display-fill-column-indicator-mode "Fill Column Indicator"))
       display-fill-column-indicator-mode)
      ("l" (lambda () (cloveynit-modes-highlight 'display-line-numbers-mode "Line Numbers"))
       display-line-numbers-mode)
      ("e" (lambda () (cloveynit-modes-highlight 'electric-indent-mode "Electric Indent"))
       electric-indent-mode)
      ("p" (lambda () (cloveynit-modes-highlight 'electric-pair-mode "Electric Pair"))
       electric-pair-mode)
      ("s" (lambda () (cloveynit-modes-highlight 'flyspell-mode "Flyspell"))
       flyspell-mode)
      ("h" (lambda () (cloveynit-modes-highlight 'hl-line-mode "Highlight Line"))
       hl-line-mode)
      ("t" (lambda () (cloveynit-modes-highlight 'prettify-symbols-mode "Prettify Symbols"))
       prettify-symbols-mode)
      ("r" (lambda () (cloveynit-modes-highlight 'show-paren-mode "Show Paren"))
       show-paren-mode)
      ("w" (lambda () (cloveynit-modes-highlight 'whitespace-mode "Whitespace"))
       whitespace-mode)
      ("m" (lambda () (cloveynit-modes-highlight 'word-wrap-whitespace-mode "Word Wrap"))
       word-wrap-whitespace-mode)
      ("i" (lambda () (cloveynit-modes-highlight 'indent-tabs-mode "Indent tabs"))
       indent-tabs-mode)
      ("b" (lambda () (cloveynit-modes-highlight 'rainbow-mode "Rainbow mode"))
       rainbow-mode)
      ]])
#+end_src
* UI Enhancements
** Basic display changes
#+begin_src emacs-lisp :tangle yes
  (setopt
   scroll-bar-mode nil
   tool-bar-mode nil
   menu-bar-mode nil)
#+end_src
** Vertico
Vertico provides a minimalistic vertical completion interface for
Emacs, making it easier to navigate and select from a list of
candidates. It is efficient, supports cycling through options, and
integrates well with other packages like Consult and Marginalia.
#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :commands (vertico-mode vertico-suspend)
    :init (vertico-mode)
    :config
    (setopt
     enable-recursive-minibuffers t
     vertico-cycle t
     vertico-buffer-display-action '(display-buffer-in-side-window (side . left))))
#+end_src
*** Multiform
Allows for the setting of different display forms for Vertico for
individual commmands or categories
#+begin_src emacs-lisp :tangle yes
  (use-package vertico-multiform
    :after vertico
    :commands (vertico-multiform-mode)
    :init (vertico-multiform-mode)
    :config
    (setopt vertico-multiform-commands
	    '((consult-line buffer)))
    (setopt vertico-multiform-categories
	    '((consult-grep buffer))))
#+end_src
** Orderless
#+begin_src emacs-lisp :tangle yes
  (use-package orderless
    :config
    (setopt
     completion-styles '(orderless basic)
     completion-category-defaults nil
     completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Corfu
Corfu is an extension for complete at point that dissplays in a popup
instead of in the minibuffer. This is similar to intellisense in other
editors.
#+begin_src emacs-lisp :tangle yes
  (use-package corfu
    :config
    (setopt
     corfu-auto t
     corfu-cycle t)
    :bind (:map corfu-map
                ("RET" . nil))
    :init (global-corfu-mode t))
#+end_src

*** Popup Info
Extension for Corfu that displays the information for a completion
candidate in a popup.
#+begin_src emacs-lisp :tangle yes
  (use-package corfu-popupinfo
    :after corfu
    :init (corfu-popupinfo-mode t))
#+end_src

** Consult
#+begin_src emacs-lisp :tangle yes
  (use-package consult
    :init
    (setopt
     xref-show-xrefs-function #'consult-xref
     xref-show-definitions-function #'consult-xref))

  (transient-define-prefix cloveynit-consult-dispatch ()
    "Transient for Consult commands"
    [["Buffers"
      ("b" "Switch" consult-buffer)
      ("o" "Other window" consult-buffer-other-window)
      ("j" "Project" consult-project-buffer)]
     ["Editing"
      ("y" "Yank" consult-yank-from-kill-ring)
      ("p" "Pop" consult-yank-pop)
      ("r" "Replace" consult-yank-replace)
      ("k" "KMacro" consult-kmacro)]
     ["Navigation"
      ("t" "Goto line" consult-goto-line)
      ("m" "Mark" consult-mark)
      ("M" "Global mark" consult-global-mark)
      ("i" "imenu" consult-imenu :if-not-derived org-mode)
      ("i" "Org Heading" consult-org-heading :if-derived org-mode)
      ("n" "imenu multi" consult-imenu-multi)]
     ["Search"
      ("l" "Line" consult-line)
      ("L" "Line multi" consult-line-multi)
      ("e" "Keep lines" consult-keep-lines)
      ("c" "Focus" consult-focus-lines)] ; Need to account for showing again, call with C-u prefix
     ["Find"
      ("g" "Grep" consult-ripgrep)
      ("G" "Git grep" consult-git-grep)
      ("f" "Find" consult-fd)]
     ])
#+end_src
** TODO [#C] Indent Bars
** TODO [#C] Rainbow delimaters
** Keycast
Display the keys pressed and the associated command in the header line.
#+begin_src emacs-lisp :tangle yes
  (use-package keycast
    :commands  (keycast-header-line-mode)
    :init (keycast-header-line-mode))
#+end_src
** TODO [#B] Embark
#+begin_src emacs-lisp :tangle yes
  (use-package embark
    :config
    (setopt embark-verbose-indicator-display-action '(display-buffer-in-side-window (side . left))))
#+end_src
** Marginalia

#+begin_src emacs-lisp :tangle yes
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src
** TODO [#C] Mode Line
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format
                '("%e" mode-line-front-space
                  (:propertize
                   ("" mode-line-mule-info mode-line-client mode-line-modified
                    mode-line-remote)
                   display (min-width (5.0)))
                  mode-line-frame-identification mode-line-buffer-identification "   "
                  mode-line-position (vc-mode vc-mode) "  "
                  mode-line-modes mode-line-misc-info mode-line-end-spaces))


  ;; (custom-set-faces '(mode-line ((t :background "CadetBlue4")))
  ;;                   '(mode-line-inactive ((t :background "CadetBlue4"))))
  ;; Meow state
  ;; read only state?
  ;; narrowed
  ;; buffer name / filename (colour for modified)
  ;; Mode
  ;; Git branch
  ;; Line/Column?
  ;; Flymake

  (defface cloveynit-mode-line-buffer-file-modified '((default :background "#6C3483" :weight bold))
    "Face for modified file buffers")

  (defface cloveynit-mode-line-buffer-file '((default :background "#34495E" :weight bold))
    "Face for file buffers")

  (defface cloveynit-mode-line-buffer-normal '((default :background "SpringGreen1" :weight bold))
    "Face for normal buffers")

  (defun cloveynit-mode-line--buffer-name ()
    (buffer-name))

  (defun cloveynit-mode-line--buffer-name-selected ()
    (let ((face (cond
                 ((and (buffer-file-name) (buffer-modified-p)) 'cloveynit-mode-line-buffer-file-modified)
                 ((buffer-file-name) 'cloveynit-mode-line-buffer-file)
                 (t 'cloveynit-mode-line-buffer-normal))))
      (propertize (cloveynit-mode-line--buffer-name) 'face face)))

  (defvar-local cloveynit-mode-line-buffer-name
      '(:eval
        (if (mode-line-window-selected-p)
            (cloveynit-mode-line--buffer-name-selected)
          (cloveynit-mode-line--buffer-name))))

  ;; (defun clover-mode-line-buffer ()
  ;;   (let ((face (cond
  ;; 	       ((and (buffer-file-name) (buffer-modified-p)) 'error)
  ;; 	       ((buffer-file-name) 'success)
  ;; 	       (t 'warning))))
  ;;     (format "%s" (propertize (buffer-name) 'face face))))

  (put 'cloveynit-mode-line-buffer-name 'risky-local-variable t)

  (setq-default mode-line-format
                '("" cloveynit-mode-line-buffer-name))
#+end_src
* Information Management
** TODO [#A] Hyperbole
#+begin_src emacs-lisp :tangle yes
  (use-package hyperbole
    :init (hyperbole-mode 1))
#+end_src
** TODO [#B] Org Mode
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :config
    (setopt
     org-pretty-entities t
     org-startup-indented t
     org-src-window-setup 'other-window
     org-todo-keywords '((sequence "TODO(t)" "ACTIVE(a!)" "SCHEDULED(s@)" "HOLD(h@)" "|" "DONE(d@)" "CANCELED(c@)")))
    (add-to-list 'org-src-lang-modes '("yaml" . "yaml-ts")))
#+end_src
*** Modern
Styling package for org mode buffers.
#+begin_src emacs-lisp :tangle yes
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src
*** Modern Indent
#+begin_src emacs-lisp :tangle yes
  (use-package org-modern-indent
    :hook (org-mode . org-modern-indent-mode))
#+end_src
*** Agenda
#+begin_src emacs-lisp :tangle yes
  (use-package org-agenda
    :after org
    :config
    (setopt org-agenda-files `(,(expand-file-name "agenda/" "~/"))))
#+end_src
*** Babel
#+begin_src emacs-lisp :tangle yes
  (use-package ob-core
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)))

    (defun cloveynit-org-confirm-babel-evaluate (lang body)
      "Custom confirmation function for evaluating code blocks.
  Check if `org-confirm-babel-evaluate` is set for the buffer.
  If not, prompt the user whether to allow running all code blocks silently."
      (unless (local-variable-p 'org-confirm-babel-evaluate)
        (if (yes-or-no-p "Run buffer code blocks without confirmation?")
            (setq-local org-confirm-babel-evaluate nil)
  	(setq-local org-confirm-babel-evaluate t)))
      org-confirm-babel-evaluate)

    (setopt org-confirm-babel-evaluate 'cloveynit-org-confirm-babel-evaluate))
#+end_src
**** TODO [#C] OB Mermaid
**** OBAsync
#+begin_src emacs-lisp :tangle yes
  (use-package ob-async)
#+end_src
** Denote
Denote is a note taking package that works on one note per file and
uses the filename for all metadata. Benefit of this is that the notes
are easily processed and consumed using normal file management tools.

#+begin_src emacs-lisp :tangle yes
  (use-package denote
    :demand t
    :config
    (denote-rename-buffer-mode t)
    (setopt
     denote-directory (expand-file-name "notes/" "~/")
     denote-file-type 'org
     denote-date-prompt-use-org-read-date t)
    :hook (dired-mode . denote-dired-mode))
#+end_src

*** Denote Transient
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-denote-dispatch ()
    "Transient for Denote commands"
    [["Notes"
      ("n" "New" denote)
      ("c" "Region" denote-region)
      ("N" "Type" denote-type)
      ("d" "Date" denote-date)
      ("z" "Signature" denote-signature)
      ("t" "Template" denote-template)]
     ["Links"
      ("i" "Link" denote-link)
      ("I" "Add" denote-add-links)
      ("b" "Backlinks" denote-backlinks)
      ("f" "Find" denote-find-link)
      ("F" "Find Backlink" denote-find-backlink)]]
    [["File"
      ("r" "Rename" denote-rename-file)
      ("R" "Rename from front matter" denote-rename-file-using-front-matter)]
     ["Folder"
      ("s" "Search" cloveynit-find-file-in-notes)
      ("p" "Dired" (lambda () (interactive) (dired denote-directory)))]])
#+end_src
*** Find notes
Completing read function for finding and opening notes from the denote-directory
#+begin_src emacs-lisp :tangle yes
  (defun cloveynit-find-file-in-notes ()
    (interactive)
    "Open file from the denote notes directory"
    (let* ((vc-dirs-ignores (mapcar
                             (lambda (dir)
                               (concat dir "/"))
                             vc-directory-exclusion-list))
           (file (completing-read "Note:" (project--files-in-directory denote-directory vc-dirs-ignores))))
      (when file (find-file file))))
#+end_src
* Editing Enhancements
** Yasnippets
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :init (yas-global-mode 1))
#+end_src

*** Yasnippets CAPF
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet-capf)
#+end_src
** Indent
*** Aggressive Indent
Keep running the indentation as typing occurs instead of only on
newlines.
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
** GPTel
#+begin_src emacs-lisp :tangle yes
  (use-package gptel
    :commands
    (gptel
     gptel-send
     gptel-menu)
    :config
    (setopt
     gptel-model 'gpt-4o-mini
     gptel-default-mode 'org-mode))
 #+end_src
** TODO [#B] Codeium
** Format All
#+begin_src emacs-lisp :tangle yes
  (use-package format-all
    :commands format-all-mode
    :config
    (add-to-list 'format-all-default-formatters '("Nix" nixfmt))
    :hook
    ((prog-mode . format-all-mode)
     (format-all-mode . format-all-ensure-formatter)))
#+end_src
*** TODO Nix
*** TODO Zig
** Treesitter
#+begin_src emacs-lisp :tangle yes
  (use-package treesit
    :defer t
    :init
    (defun cloveynit/report-unused-ts-modes ()
      "Report TreeSitter modes that are not mapped in major-mode-remap-alist or auto-mode-alist."
      (let ((ts-modes (apropos-internal "-ts-mode$" 'functionp)))
        (dolist (ts-mode ts-modes)
          (let ((used-in-major-mode-remap-alist
                 (seq-some (lambda (entry)
                             (equal ts-mode (cdr entry)))
                           major-mode-remap-alist))
                (used-in-auto-mode-alist
                 (seq-some (lambda (entry)
                             (equal ts-mode (cdr entry)))
                           auto-mode-alist))
  	      (excluded
  	       (seq-some (lambda (entry) (equal ts-mode entry))
  			 '(sh--redirect-bash-ts-mode))))
            (unless (or used-in-major-mode-remap-alist used-in-auto-mode-alist excluded)
              (warn "TS Mode not mapped: %s" ts-mode))))))

    :config
    (setopt
     treesit-font-lock-level 4
     treesit-extra-load-path `(,(expand-file-name "~/.config/emacs/var/tree-sitter"))
     major-mode-remap-alist '((sh-mode . bash-ts-mode)
    			    (c++-mode . c++-ts-mode)
    			    (c-or-c++-mode . c-or-c++-ts-mode)
    			    (c-mode . c-ts-mode)
    			    (cmake-mode . cmake-ts-mode)
    			    (csharp-mode . csharp-ts-mode)
    			    (css-mode . css-ts-mode)
    			    (indent-bars-mode . indent-bars-ts-mode)
    			    (java-mode . java-ts-mode)
    			    (javascript-mode . js-ts-mode)
    			    (js-json-mode . json-ts-mode)
    			    ;; (nim-mode . nim-ts-mode)
    			    (python-mode . python-ts-mode)
    			    (ruby-mode . ruby-ts-mode)
    			    (conf-toml-mode . toml-ts-mode)))
    (dolist (mode-assoc
    	   '(("\\(?:Dockerfile\\(?:\\..*\\)?\\|\\.[Dd]ockerfile\\)\\'"
    	      . dockerfile-ts-mode)
    	     ("/go\\.mod\\'" . go-mod-ts-mode)
    	     ("\\.go\\'" . go-ts-mode)
  	     ("\\.nix\\'" . nix-ts-mode)
  	     ("\\.rs\\'" . rust-ts-mode)
  	     ("\\.ts\\'" . typescript-ts-mode)
  	     ("\\.tsx\\'" . tsx-ts-mode)
  	     ("\\.ya?ml\\'" . yaml-ts-mode)))
      (add-to-list 'auto-mode-alist mode-assoc))

    (cloveynit/report-unused-ts-modes))
#+end_src
** TODO [#B] Spelling
* Programming
** Flymake
#+begin_src emacs-lisp :tangle yes
  (use-package flymake
    :hook (prog-mode . flymake-mode))
#+end_src
** Eglot
#+begin_src emacs-lisp :tangle yes
  (use-package eglot
    :init
    (defun cloveynit-reorder-eldoc-functions ()
      "Fix the order of the eldoc functions so that flymake comes first"
      (setq eldoc-documentation-functions
  	  (cons #'flymake-eldoc-function
  		(remove #'flymake-eldoc-function eldoc-documentation-functions))))
    :commands (eglot-ensure)
    :hook
    ((prog-mode . eglot-ensure)
     (eglot-managed-mode . cloveynit-reorder-eldoc-functions))
    :config
    (add-to-list 'eglot-server-programs `(nix-ts-mode . ,(cdr (assoc 'nix-mode eglot-server-programs))))
    (setopt completion-category-defaults nil)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src
** Eldoc
#+begin_src emacs-lisp :tangle yes
(use-package eldoc
  :config
  (setopt eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly))
#+end_src

** Nix
#+begin_src emacs-lisp :tangle yes
  (use-package nix-ts-mode
    :mode "\\.nix\\'")
#+end_src

** Sh
#+begin_src emacs-lisp :tangle yes
  (use-package sh-script
    :init
    (setopt
     sh-shell "bash"
     sh-shell-file "bash"))
#+end_src

** Zig
#+begin_src emacs-lisp :tangle yes
  (use-package zig-mode
    :mode ("\\.zig\\'" . zig-mode))
#+end_src

** Language ID
#+begin_src emacs-lisp :tangle yes
  (use-package language-id
    :config
    (setopt language-id--definitions
  	  (append
  	   '(("Nix" nix-ts-mode)) language-id--definitions)))
#+end_src

** Compile
#+begin_src emacs-lisp :tangle yes
  (use-package compilation
    :hook (compilation-filter . ansi-color-compilation-filter))
#+end_src

* Version Control
** Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit)
#+end_src
** TODO [#C] Diff-HL
* Project Management
** Project
Project is the in-built project management package.
#+begin_src emacs-lisp :tangle yes
  (defun cloveynit-project--dispact-wrap-command (cmd)
    "Wrap command CMD to optionally display buffer in another window."
    (interactive)
    (let ((display-buffer-overriding-action
           (if (transient-arg-value "other window" (transient-args transient-current-command))
               '(display-buffer-reuse-window (inhibit-same-window . t))
             display-buffer-overriding-action)))
      (call-interactively cmd)))

  (transient-define-prefix cloveynit-project-dispatch ()
    "Transient for project.el commands."
    [["Buffers and Files"
      ("B" "List Buffers" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-list-buffers)))
      ("b" "Consult Buffer" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'consult-project-buffer)))
      ("s" "Switch to Buffer" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-switch-to-buffer)))
      ("f" "Find File" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-find-file)))
      ("d" "Dired" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-dired)))
      ("F" "Find Directory" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-find-dir)))]
     ["Search and Replace"
      ("r" "Find Regexp" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-find-regexp)))
      ("q" "Query Replace" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-query-replace-regexp)))]
     ["Project Actions"
      ("c" "Compile" project-compile)
      ("e" "Eshell" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-eshell)))
      ("t" "Shell" (lambda () (interactive) (cloveynit-project--dispact-wrap-command 'project-shell)))
      ("x" "Shell Command" project-shell-command)
      ("a" "Async Shell Command" project-async-shell-command)
      ("v" "VC-Dir" project-vc-dir)
      ("m" "Magit Status" magit-project-status)]
     ["Manage Projects"
      ("S" "Switch Project" project-switch-project)
      ("k" "Kill Buffers" project-kill-buffers)
      ("p" "Forget Project" project-forget-project)
      ("P" "Forget Projects Under" project-forget-projects-under)
      ("z" "Forget Zombie Projects" project-forget-zombie-projects)
      ("R" "Remember Projects Under" project-remember-projects-under)]
     ["Options"
      ("o" "Force Display in Other Window" "other window")]])
#+end_src
** Direnv
#+begin_src emacs-lisp :tangle yes
  (use-package
   direnv
   :config (setopt direnv-always-show-summary nil)
   :init (direnv-mode))
#+end_src
* Utilities
** Helpful
Improved help display.
#+begin_src emacs-lisp :tangle yes
  (use-package helpful
    :commands
    (helpful-callable
     helpful-function
     helpful-macro
     helpful-command
     helpful-key
     helpful-variable
     helpful-at-point)
    :init
    (transient-define-prefix cloveynit-helpful-dispatch ()
      "Transient for Help commands"
      ["Helpful"
       [("c" "Callable" helpful-callable)
        ("f" "Function" helpful-function)
        ("x" "Command" helpful-command)
        ("m" "Macro" helpful-macro)
        ("k" "Key" helpful-key)
        ("v" "Variable" helpful-variable)
        ("p" "At point" helpful-at-point)]]))

#+end_src
** Whichkey
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :commands which-key-show-major-mode)
#+end_src
** Dired
Hide files matching ~dired-omit-files~ regex or the ~dired-omit-extensions~ list.
#+begin_src emacs-lisp :tangle yes
  (use-package dired-x
    :hook (dired-mode . dired-omit-mode))
#+end_src
** Ediff
#+begin_src emacs-lisp :tangle yes
  (use-package ediff
    :defer t
    :config
    (defun cloveynit-ediff-new-frame ()
      (select-frame (make-frame)))
    (setopt
     ediff-window-setup-function #'ediff-setup-windows-plain
     ediff-keep-variants nil)
    :hook
    ((ediff-before-setup . cloveynit-ediff-new-frame)
     (ediff-quit . delete-frame)))
#+end_src
** Ace-Window
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :init
    (setopt display-buffer-base-action
  	  '((display-buffer--maybe-same-window
  	     display-buffer-reuse-window
  	     display-buffer-ace-window)))
    (advice-add 'corfu-popupinfo--show :around #'safe-corfu-popupinfo--show)
    :commands (ace-window aw-select display-buffer-ace-window safe-corfu-popupinfo--show)
    :config
    (defun safe-corfu-popupinfo--show (f candidate)
      (let ((display-buffer-base-action nil))
        (funcall f candidate)))

    (defun cloveynit-aw-select-force ()
      (let ((window nil))
        (while (not window)
  	(condition-case nil
  	    (setq window (aw-select nil))
  	  (error nil)))
        window))

    (defun display-buffer-ace-window (buffer alist)
      (let ((initial-window-count (length (window-list))))
        (if (eq initial-window-count 1)
  	  nil
  	(let* ((aw-dispatch-always t)
  	       (aw-scope 'frame)
  	       (original-window (selected-window))
  	       (window (progn
  			 (message (format "Switching to: %s" buffer))
  			 (cloveynit-aw-select-force)))
  	       (new-window-p (> (length (window-list)) initial-window-count))
  	       (window-type (if new-window-p 'window 'reuse)))
  	  (progn
  	    (select-window original-window)
  	    (window--display-buffer buffer window window-type alist)))))))
#+end_src
** EShell
#+begin_src emacs-lisp :tangle yes
  (use-package esh-mode
    :config
    (defun cloveynit-eshell-ansi-color ()
      (setenv "TERM" "xterm-256color"))
    :hook (eshell-mode . cloveynit-eshell-ansi-color))
#+end_src
* Custom Functions
