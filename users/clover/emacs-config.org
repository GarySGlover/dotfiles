#+PROPRTY: header-args:emacs-list :results silent
* Initialisation
This section contains basic configurations for emacs to tidy up the interface and
set some defaults for the inbuilt modules that don't fit into other categories.

** Disable package downloads
Remove elpa from the package archives so that no packages will be automtically
downloaded. All packages will be installed using the nix package manager.

#+begin_src emacs-lisp
  (setq package-archives nil)
#+end_src

** Cleanup interface
Remove some of the default GUI display components that are typically used with
mouse rather than keyboard.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (setq inhibit-startup-message t)
#+end_src

** Disabled commands
Emacs has disabled some inbuilt functions by default as a safety measure. Replacing
the function that is called prior to running these enables all these commands without
further confirmation.

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Use short answers
Allow use of y/n instead of yes/no for interactive command confirmations.

#+begin_src emacs-lisp
  (setq use-short-answers t)
#+end_src

** Clean directories
Tell emacs not to create lock files as everthing being edited is single user so
should have no conflicts over files. Use of no-littering to reduce other files
being scattered in the filesystem and keep the emacs folder clean.

#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :config
    (no-littering-theme-backups))
  (setq create-lockfiles nil)
#+end_src

** Buffer auto revert
Revert the buffer to the on disk file contents when they are changed outside of emacs.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** Environment Variable import
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+end_src

* Core Utils
Utilities for emacs that support further parts of the configuration.
** Transient
#+begin_src emacs-lisp
  (use-package transient)
#+end_src
** Posframe
Better popup frames
#+begin_src emacs-lisp
  (use-package posframe)
#+end_src

** Which key
Popup to show available shortcut keys in current mode
#+begin_src emacs-lisp
  (use-package which-key
    :demand
    :config
    (which-key-mode)
    (which-key-add-keymap-based-replacements org-mode-map
      "C-c C-v" "Org babel"
      "C-c C-x" "Org extra")
    :bind (:map help-map
                ("C-h" . which-key-C-h-dispatch)
                ("M-w" . which-key-show-top-level)
                ("M-m" . which-key-show-major-mode))
    :custom
    (which-key-show-early-on-C-h t "Press C-h to show commands")
    (which-key-idle-delay 1 "Delay which key normal display")
    (which-key-idle-secondary-delay 0.05 "Quicker which-key subsequest display")
    (which-key-max-display-columns 3)
    (which-key-show-remaining-keys t))

  (use-package which-key-posframe
    :after (which-key posframe)
    :config
    (defun which-key-posframe--max-dimensions-override (x)
      (cons (min 10 (pop x)) x))
    (advice-add 'which-key-posframe--max-dimensions :filter-return #'which-key-posframe--max-dimensions-override)
    (setq which-key-posframe-poshandler 'posframe-poshandler-frame-center)
    (which-key-posframe-mode))

#+end_src

* Visual
** Alert notification
When emacs reports an exception the default action is to play a bell sound. This
replaces the sound with a double flash on the modeline background.

#+begin_src emacs-lisp
  (defun double-flash-modeline ()
    (let ((flash-sec (/ 1.0 20)))
      (invert-face 'mode-line)
      (run-with-timer flash-sec nil #'invert-face 'mode-line)
      (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
      (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))
  (setq visible-bell nil
	ring-bell-function 'double-flash-modeline)
#+end_src

** Theme
Setup the main theme and fonts used within this emacs configuration.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "FiraCode Nerd Font"
                      :height 120)
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font"))

  (load-theme 'doom-dracula t)
#+end_src

** Transparency
Set default transparency of frames and creation of hydra function for adjusting alpha.

#+begin_src emacs-lisp
  (defun set-frame-alpha (value)
    (set-frame-parameter nil 'alpha-background value))

  (defun get-frame-alpha ()
    (frame-parameter nil 'alpha-background))

  (defun change-frame-alpha-by (value)
    (let ((newAlpha (+ value (get-frame-alpha))))
      (if (> newAlpha (get-frame-alpha))
          (if (> newAlpha 100)
              (set-frame-alpha 100)
            (set-frame-alpha newAlpha))
          (if (< newAlpha 0)
              (set-frame-alpha 0)
            (set-frame-alpha newAlpha)))))
  (set-frame-alpha 85)
  (add-to-list 'default-frame-alist '(alpha-background . 85))

  (transient-define-suffix clover--transient-transparency-increase-frame-alpha ()
    :key "i" :description "Increase"
    (interactive)
    (change-frame-alpha-by 1))
  (transient-define-suffix clover--transient-transparency-decrease-frame-alpha ()
    :key "d" :description "Decrease"
    (interactive)
    (change-frame-alpha-by -1))
  (transient-define-suffix clover--transient-transparency-frame-alpha-low ()
    :key "l" :description "Low"
    (interactive)
    (set-frame-alpha 0))
  (transient-define-suffix clover--transient-transparency-frame-alpha-high ()
    :key "h" :description "High"
    (interactive)
    (set-frame-alpha 100))
  (transient-define-suffix clover--transient-transparency-frame-alpha-reset ()
    :key "r" :description "r"
    (interactive)
    (set-frame-alpha 85))

  (transient-define-prefix ct-transparency ()
    :transient-suffix 'transient--do-stay
    :transient-non-suffix 'transient--do-exit
    [(clover--transient-transparency-increase-frame-alpha)
     (clover--transient-transparency-decrease-frame-alpha)
     (clover--transient-transparency-frame-alpha-low)
     (clover--transient-transparency-frame-alpha-high)
     (clover--transient-transparency-frame-alpha-reset)])
  (bind-key "C-c t" 'ct-transparency)
#+end_src

* Project Management
** Version control

Using Magit as the git porcelain. Is configured to use the same window rather than
open a new one for all operations possible. As some operations such as commit open
the diff window as well, those buffers open in a seperate window.

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :bind ("C-c g" . magit-status))

  (use-package forge
    :after magit)
#+end_src
* Search
** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :defer t
    :config
    (when
	(fboundp 'emacs-run-launcher-directories)
      (emacs-run-launcher-directories)))
#+end_src
* System
This area is for system utilities and system functions such as the app
launcher for the desktop environment.
** App Launcher
Counsel-linux app configuration to improve formatting
#+begin_src emacs-lisp
  (defun emacs-run-launcher-format-function
      (name comment exec)
    "Formatter for the app launcher. NAME is the name of the application,
  COMMENT is the applications comment and EXEC is the command to launch"
    (format "% -25s %s"
	    (propertize name 'face 'font-lock-buitlin-face)
	    (or comment "")))
  (setq counsel-linux-app-format-function #'emacs-run-launcher-format-function)
#+end_src
App launcher using counsel-linux-app

Filter app launcher directories to allow overriding of desktop files.
#+begin_src emacs-lisp
  (defun emacs-run-launcher-directories ()
    "Update the directories used by counsel-linux-app"
    (setq counsel-linux-apps-directories
	  (seq-remove
	   (lambda
	     (x)
	     (string-prefix-p "/nix/store/" x))
	   counsel-linux-apps-directories)))
  ;;(setq counsel-linux-apps-directories '("/home/clover/.nix-profile/share/applications"))
#+end_src
Run launcher in own frame with title set to be picked up by window manager.
#+begin_src emacs-lisp
  (defun emacs-run-launcher
      ()
    "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Run counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    (interactive)
    (with-selected-frame
	(make-frame
	 '((name . "emacs-run-launcher")
	   (minibuffer . only)
	   (width . 120)
	   (height . 11)))
      (unwind-protect
	  (counsel-linux-app)
	(delete-frame))))
#+end_src
* Window  Management
** Popper
#+begin_src emacs-lisp
  (use-package popper
    :bind (("C-c p l" . popper-toggle-latest)
           ("C-c p c" . popper-cycle)
           ("C-c p t" . popper-toggle-type)
           ("C-c p k" . popper-kill-latest-popup))
    :config
    (setq popper-display-control nil)
    :init
    (setq popper-reference-buffers
          '(messages-buffer-mode
            help-mode
            complilation-mode
            magit-status-mode
            magit-process-mode))
    (setq popper-group-function nil)
    (popper-mode 1)
    (popper-echo-mode 1))
#+end_src
** Display buffer rules
*** Helper functions
#+begin_src emacs-lisp
  (defun clover--buffer-left-side ()
    '((display-buffer-in-side-window)
     (side . left)
     (window-width . 100)
     (body-function . select-window)))
  (defun clover--buffer-right-side ()
    '((display-buffer-in-side-window)
     (side . right)
     (window-width . 100)
     (body-function . select-window)))
#+end_src
*** Help buffer
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               (append '((major-mode . help-mode))
                       (clover--buffer-right-side)))
#+end_src
*** Messages buffer
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               (append '((major-mode . messages-buffer-mode))
                       (clover--buffer-right-side)))
#+end_src
*** Magit
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               (append '((major-mode . magit-status-mode))
                       (clover--buffer-left-side)))

  (add-to-list 'display-buffer-alist
               (append '((major-mode . magit-process-mode))
                       (clover--buffer-left-side)))
#+end_src
