#+title: My Waybar Configuration
#+author: Gary Glover
#+property: header-args :results silent
#+STARTUP: content

* Waybar
#+name: waybar-style
#+begin_src css :tangle no
  ,* {
      font-family: "${theme.font.name}";
      font-size: ${toString theme.font.size}px;
      color: #${faces.fgFontLockVariableNameFace};
  }
  window#waybar {
      background-color: #${faces.bgDefault};
      border: ${toString theme.border}px solid #${faces.fgBorderInactive};
      border-radius: ${toString theme.radius}px;
  }
  window#waybar.fullscreen {
      color: #${faces.fgFontLockWarningFace};
  }
  #clock {
      padding: 0 0.5em;
      margin: 0.25em;
  }
  #battery {
      padding: 0 0.5em;
      margin: 0.25em;
  }
  #pulseaudio {
      padding: 0 0.5em;
      margin: 0.25em;
  }
  #workspaces {
      border-radius: ${toString theme.radius}px;
      background-color: #${faces.bgDefault};
      margin: 0.5em;
  }
  #workspaces button.visible {
      color: #${faces.fgFontLockWarningFace};
      border: ${toString theme.border}px solid #${faces.fgBorderInactive};
      border-radius: ${toString theme.radius}px;
  }
  #workspaces button.active {
      color: #${faces.fgFontLockWarningFace};
      border: ${toString theme.border}px solid #${faces.fgFontLockWarningFace};
      border-radius: ${toString theme.radius}px;
  }
  #submap {
      color: #${faces.fgFontLockVariableNameFace};
  }
  #submap.command {
      color: #${faces.fgFontLockStringFace};
  }
  #submap.insert {
      color: #${faces.fgFontLockWarningFace};
  }
#+end_src

#+begin_src nix :tangle default.nix :comments link :noweb tangle
  {
    config,
    lib,
    ...
  }:
  let
    theme = config.wolf.theme;
    faces = theme.faces;
  in
  {
    config = lib.mkIf config.wolf.roles.desktop {
      programs.waybar = {
        enable = true;
        systemd.enable = false;
        settings = {
          mainbar = {
            layer = "top";
            position = "top";
            margin = "${toString theme.gaps}";
            exclusive = "true";
            modules-left = [
              "hyprland/workspaces"
              "hyprland/submap"
              "custom/kanata-layer"
            ];
            modules-center = [
              "hyprland/window"
            ];
            modules-right = [
              "pulseaudio"
              "battery"
              "clock"
            ];
            "hyprland/workspaces" = { };
            "hyprland/submap" = {
              always-on = "true";
            };
            "clock" = {
              format = "{:%Y%m%d-%H%M}";
              tooltip = "false";
            };
            pulseaudio = {
              format = "{desc} {volume}% {icon}";
              format-muted = "ï€¦";
            };
            "custom/kanata-layer" = {
              exec = "${config.xdg.configHome}/waybar/kanata-layer";
              restart-interval = 1;
              format = "{}";
              return-type = "json";
            };
          };
        };
        style = ''
          <<waybar-style>>
        '';
      };
      xdg.configFile."waybar/kanata-layer".source = ./kanata-layer;
    };
  }
#+end_src

* Kanata Script
#+begin_src bash :tangle kanata-layer :shebang #!/usr/bin/env bash :comments link
  #!/usr/bin/env bash

  # Connect to the server on localhost port 42001 and process JSON messages
  nc localhost 42001 | while read -r line; do
  	layer_name=$(echo "$line" | jq -r '.LayerChange.new')

  	if [ "$layer_name" != "null" ]; then
  		echo "{\"text\":\"$layer_name\"}"
  	fi
  done
#+end_src
