#+title: My Emacs Config
#+author: Gary Glover
#+property: header-args :results silent
#+STARTUP: content

* Core Emacs
** Lexical Binding
Configure lexical binding for the rest of this init. A lexically-bound variable
has lexical scope, meaning that any reference to the variable must be
located textually within the binding construct.

This must be kept as the first entry in this list as documented in
"(elisp)Using Lexical Binding".

#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding: t -*-
#+end_src

** Byte compiler warnings
Silence the byte compiler warnings but still log. This is to prevent
Emaccs always displaying the \ast{}Warnings\ast{} buffer on startup.

#+begin_src emacs-lisp :tangle yes
  (use-package
   comp
   :custom native-comp-async-report-warnings-errors 'silent)
#+end_src

** Disable package downloads
Remove elpa from the package archives so that no packages will be
automatically downloaded. All packages will be installed using the nix
package manager.

#+begin_src emacs-lisp :tangle yes
  (use-package package
    :custom
    (package-archives nil "Remove all package download locations"))
#+end_src

* Key Bindings
** Meow
This is the meow modal editing suite.

#+begin_src emacs-lisp :tangle yes
  (use-package
    meow
    :init (meow-global-mode 1)
    :config
    (add-to-list 'meow-selection-command-fallback '(meow-replace . meow-yank))
    (setopt
     meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
     meow-use-clipboard t)
    ;; Set keys for MOTION state. This is the state used in read-only style buffers like dired/help/magit
    (meow-motion-overwrite-define-key
     '("h" . meow-left)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("l" . meow-right)
     '("r" . cloveynit-global-dispatch)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Allow SPC h/j/k/l to run the original command that will be bound to H-<h/j/k/l>
     '("h" . "H-h")
     '("j" . "H-j")
     '("k" . "H-k")
     '("l" . "H-l")
     '("r" . "H-C")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     ;; Use SPC //? for accessing meow help
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-replace)
     '("q" . meow-quit)
     '("r" . cloveynit-global-dispatch)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
#+end_src
** General
#+begin_src emacs-lisp :tangle yes
  (use-package general
    :init
    (general-define-key
     :keymaps 'global-map
     "<f5>" #'standard-themes-toggle
     "M-S" #'vertico-suspend
     "C-." #'embark-act)
    (with-eval-after-load 'corfu-candidate-overlay
      (general-define-key
       :keymaps 'corfu-candidate-overlay-completion-map
       "C-n" #'completion-at-point
       "<tab>" #'corfu-candidate-overlay-complete-at-point)))
#+end_src
** TODO Hydra
** TODO Transient
Transient allows the creation and mapping of keybindings through
menus. Initial configuration is to tie into meow, having a
global-dispatch map available in all buffers that links to custom
package maps. In the future I shall try to create a local mode map
that applies to certian major/minor modes.

#+begin_src emacs-lisp :tangle yes
  (use-package transient
    :init
    (transient-define-prefix cloveynit-global-dispatch ()
      "Global transient menu"
      [["Default"
        ("a" "Generic" cloveynit-global-generic-dispatch)
        ("c" "Consult" cloveynit-consult-dispatch)
        ("g" "Magit" magit-dispatch)
        ("h" "Help" cloveynit-helpful-dispatch)
        ("n" "Denote" cloveynit-denote-dispatch)
        ("p" "Project" cloveynit-project-dispatch)
        ("m" "Modes" cloveynit-modes-dispatch)
        ("w" "Window" cloveynit-window-dispatch)
        ]]))
#+end_src
*** Place holder transients
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-modes-dispatch ()
    "Transient for toggling minor modes"
    [["Modes"
      ]])

  (transient-define-prefix cloveynit-window-dispatch ()
    "Transient for managing windows"
    [["Windows"
      ]])

#+end_src
*** Global generic transient
This transient is to provide a place for common commands, that don't
fit in as part of any other group.
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-global-generic-dispatch ()
    "Global generic transient"
    [["Narrowing"
      ("n" "Narrow" narrow-to-region)
      ("w" "Widen" widen :if (buffer-narrowed-p))]])
#+end_src
* UI Enhancements
** Basic display changes
#+begin_src emacs-lisp :tangle yes
  (setopt
   scroll-bar-mode nil
   tool-bar-mode nil
   menu-bar-mode nil)
#+end_src
** Theme.
#+begin_src emacs-lisp :tangle yes
  (use-package standard-themes
    :init
    (standard-themes-load-dark)
    :custom
    (standard-themes-bold-constructs t)
    (standard-themes-italic-constructs t)
    (standard-themes-mixed-fonts t)
    (standard-themes-variable-pitch-ui t)
    (standard-themes-prompts '(extrabold italic)))
#+end_src
** Vertico
Vertico provides a minimalistic vertical completion interface for
Emacs, making it easier to navigate and select from a list of
candidates. It is efficient, supports cycling through options, and
integrates well with other packages like Consult and Marginalia.
#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :commands (vertico-mode vertico-suspend)
    :init (vertico-mode)
    :config
    (setopt
     enable-recursive-minibuffers t
     vertico-cycle t))
#+end_src
*** Multiform
Allows for the setting of different display forms for Vertico for
individual commmands or categories
#+begin_src emacs-lisp :tangle yes
  (use-package vertico-multiform
    :after vertico
    :commands (vertico-multiform-mode)
    :init (vertico-multiform-mode)
    :config
    (setopt vertico-multiform-commands
	    '((consult-line buffer)))
    (setopt vertico-multiform-categories
	    '((consult-grep buffer))))
#+end_src
** Orderless
#+begin_src emacs-lisp :tangle yes
  (use-package orderless
    :config
    (setopt
     completion-styles '(orderless basic)
     completion-category-defaults nil
     completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Corfu
Corfu is an extension for complete at point that dissplays in a popup
instead of in the minibuffer. This is similar to intellisense in other
editors.
#+begin_src emacs-lisp :tangle yes
  (use-package corfu
    :config
    (setopt
     corfu-auto t
     corfu-cycle t)
    :bind (:map corfu-map
                ("RET" . nil))
    :init (setopt global-corfu-mode t))
#+end_src
*** Overlay
#+begin_src emacs-lisp :tangle no
  (use-package corfu-candidate-overlay
    :after corfu
    :init
    (setq corfu-candidate-overlay-completion-map
	  (make-sparse-keymap))
    :config
    (corfu-candidate-overlay-mode +1)
    (defun corfu-candidate-overlay-completion-map--enable
	(position prefix candidate how-many-candidates)
      (unless
	  (= 0
	     (length candidate))
	(set-transient-map corfu-candidate-overlay-completion-map)))
    (advice-add 'corfu-candidate-overlay--update :after #'corfu-candidate-overlay-completion-map--enable))
#+end_src
*** Popup Info
Extension for Corfu that displays the information for a completion
candidate in a popup.
#+begin_src emacs-lisp :tangle yes
  (use-package corfu-popupinfo
    :after corfu
    :hook (global-corfu-mode . corfu-popupinfo-mode))
#+end_src

** Fonts
Set default font to be used with general text.
Use a coding font for fixed pitch and overwrite the default font in prog-mode buffers to
use the same.
#+begin_src emacs-lisp :tangle yes
  (defun cc/global-face ()
    (set-face-attribute 'default nil :family "FiraCode Nerd Font")
    (set-face-attribute 'fixed-pitch nil :family "FiraCode Nerd Font")
    (set-face-attribute 'fixed-pitch-serif nil :family "FiraCode Nerd Font")
    (set-face-attribute 'variable-pitch nil :family "FiraCode Nerd Font"))

  (defun cc/text-face ()
    (setq buffer-face-mode-face '(:family "Iosevka"))
    (buffer-face-mode))

  (if (daemonp)
      (add-hook 'server-after-make-frame-hook
                (lambda (frame)
                  (with-selected-frame frame
                    (cc/global-face))))
    (cc/global-face))

  (add-hook 'text-mode-hook #'cc/text-face)
#+end_src
** Consult
#+begin_src emacs-lisp :tangle yes
  (use-package consult
    :init
    (setopt
     xref-show-xrefs-function #'consult-xref
     xref-show-definitions-function #'consult-xref))

  (transient-define-prefix cloveynit-consult-dispatch ()
    "Transient for Consult commands"
    [["Buffers"
      ("b" "Switch" consult-buffer)
      ("o" "Other window" consult-buffer-other-window)
      ("j" "Project" consult-project-buffer)]
     ["Editing"
      ("y" "Yank" consult-yank-from-kill-ring)
      ("p" "Pop" consult-yank-pop)
      ("r" "Replace" consult-yank-replace)
      ("k" "KMacro" consult-kmacro)]
     ["Navigation"
      ("t" "Goto line" consult-goto-line)
      ("m" "Mark" consult-mark)
      ("M" "Global mark" consult-global-mark)
      ("i" "imenu" consult-imenu :if-not-derived org-mode)
      ("i" "Org Heading" consult-org-heading :if-derived org-mode)
      ("n" "imenu multi" consult-imenu-multi)]
     ["Search"
      ("l" "Line" consult-line)
      ("L" "Line multi" consult-line-multi)
      ("e" "Keep lines" consult-keep-lines)
      ("c" "Focus" consult-focus-lines)] ; Need to account for showing again, call with C-u prefix
     ["Find"
      ("g" "Grep" consult-ripgrep)
      ("G" "Git grep" consult-git-grep)
      ("f" "Find" consult-fd)]
     ])
#+end_src
** TODO [#C] Indent Bars
** TODO [#C] Rainbow delimaters
** Keycast
Display the keys pressed and the associated command in the header line.
#+begin_src emacs-lisp :tangle yes
  (use-package keycast
    :commands  (keycast-header-line-mode)
    :init (keycast-header-line-mode))
#+end_src
** TODO [#B] Embark
#+begin_src emacs-lisp :tangle yes
  (use-package embark)
#+end_src
** TODO [#B] Marginalia
#+begin_src emacs-lisp :tangle yes
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src
** TODO [#C] Mode Line
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format
                '("%e" mode-line-front-space
                  (:propertize
                   ("" mode-line-mule-info mode-line-client mode-line-modified
                    mode-line-remote)
                   display (min-width (5.0)))
                  mode-line-frame-identification mode-line-buffer-identification "   "
                  mode-line-position (vc-mode vc-mode) "  "
                  mode-line-modes mode-line-misc-info mode-line-end-spaces))


  ;; (custom-set-faces '(mode-line ((t :background "CadetBlue4")))
  ;;                   '(mode-line-inactive ((t :background "CadetBlue4"))))
  ;; Meow state
  ;; read only state?
  ;; narrowed
  ;; buffer name / filename (colour for modified)
  ;; Mode
  ;; Git branch
  ;; Line/Column?
  ;; Flymake

  (defface cloveynit-mode-line-buffer-file-modified '((default :background "#6C3483" :weight bold))
    "Face for modified file buffers")

  (defface cloveynit-mode-line-buffer-file '((default :background "#34495E" :weight bold))
    "Face for file buffers")

  (defface cloveynit-mode-line-buffer-normal '((default :background "SpringGreen1" :weight bold))
    "Face for normal buffers")

  (defun cloveynit-mode-line--buffer-name ()
    (buffer-name))

  (defun cloveynit-mode-line--buffer-name-selected ()
    (let ((face (cond
                 ((and (buffer-file-name) (buffer-modified-p)) 'cloveynit-mode-line-buffer-file-modified)
                 ((buffer-file-name) 'cloveynit-mode-line-buffer-file)
                 (t 'cloveynit-mode-line-buffer-normal))))
      (propertize (cloveynit-mode-line--buffer-name) 'face face)))

  (defvar-local cloveynit-mode-line-buffer-name
      '(:eval
        (if (mode-line-window-selected-p)
            (cloveynit-mode-line--buffer-name-selected)
          (cloveynit-mode-line--buffer-name))))

  ;; (defun clover-mode-line-buffer ()
  ;;   (let ((face (cond
  ;; 	       ((and (buffer-file-name) (buffer-modified-p)) 'error)
  ;; 	       ((buffer-file-name) 'success)
  ;; 	       (t 'warning))))
  ;;     (format "%s" (propertize (buffer-name) 'face face))))

  (put 'cloveynit-mode-line-buffer-name 'risky-local-variable t)

  (setq-default mode-line-format
                '("" cloveynit-mode-line-buffer-name))
#+end_src
* Information Management
** TODO [#A] Hyperbole
#+begin_src emacs-lisp :tangle yes
  (use-package hyperbole
    :init (hyperbole-mode 1))
#+end_src
** TODO [#B] Org Mode
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :config
    (setopt
     org-pretty-entities t
     org-startup-indented t
     org-src-window-setup 'other-window))
#+end_src
*** Org Modern
Styling package for org mode buffers.
#+begin_src emacs-lisp :tangle yes
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src
*** Org Modern Indent
#+begin_src emacs-lisp :tangle yes
  (use-package org-modern-indent
    :hook (org-mode . org-modern-indent-mode))
#+end_src
*** TODO [#C] OB Mermaid
** Denote
Denote is a note taking package that works on one note per file and
uses the filename for all metadata. Benefit of this is that the notes
are easily processed and consumed using normal file management tools.

#+begin_src emacs-lisp :tangle yes
  (use-package denote
    :demand t
    :config
    (denote-rename-buffer-mode t)
    (setopt
     denote-directory "/home/clover/notes/"
     denote-file-type 'org
     denote-date-prompt-use-org-read-date t)
    :hook (dired-mode . denote-dired-mode))
#+end_src

*** Denote Transient
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-denote-dispatch ()
    "Transient for Denote commands"
    [["Notes"
      ("n" "New" denote)
      ("c" "Region" denote-region)
      ("N" "Type" denote-type)
      ("d" "Date" denote-date)
      ("z" "Signature" denote-signature)
      ("t" "Template" denote-template)]
     ["Links"
      ("i" "Link" denote-link)
      ("I" "Add" denote-add-links)
      ("b" "Backlinks" denote-backlinks)
      ("f" "Find" denote-find-link)
      ("F" "Find Backlink" denote-find-backlink)]]
    [["File"
      ("r" "Rename" denote-rename-file)
      ("R" "Rename from front matter" denote-rename-file-using-front-matter)]
     ["Folder"
      ("s" "Search" cloveynit-find-file-in-notes)
      ("p" "Dired" (lambda () (interactive) (dired denote-directory)))]])
#+end_src
*** Find notes
Completing read function for finding and opening notes from the denote-directory
#+begin_src emacs-lisp :tangle yes
  (defun cloveynit-find-file-in-notes ()
    (interactive)
    "Open file from the denote notes directory"
    (let* ((vc-dirs-ignores (mapcar
                             (lambda (dir)
                               (concat dir "/"))
                             vc-directory-exclusion-list))
           (file (completing-read "Note:" (project--files-in-directory denote-directory vc-dirs-ignores))))
      (when file (find-file file))))
#+end_src
* Editing Enhancements
** Yasnippets
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :init (yas-global-mode 1))
#+end_src

*** Yasnippets CAPF
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet-capf)
#+end_src
** Indent
*** Aggressive Indent
Keep running the indentation as typing occurs instead of only on
newlines.
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
** TODO [#B] GPTel
** TODO [#B] Codeium
** TODO [#A] Eglot
Will need to update Corfu for Eglot

** TODO [#A] Format All
** TODO [#A] Treesitter
#+begin_src emacs-lisp :tangle yes
  (use-package treesit
    :defer t
    :init
    (defun cloveynit/report-unused-ts-modes ()
      "Report TreeSitter modes that are not mapped in major-mode-remap-alist or auto-mode-alist."
      (let ((ts-modes (apropos-internal "-ts-mode$" 'functionp)))
        (dolist (ts-mode ts-modes)
          (let ((used-in-major-mode-remap-alist
                 (seq-some (lambda (entry)
                             (equal ts-mode (cdr entry)))
                           major-mode-remap-alist))
                (used-in-auto-mode-alist
                 (seq-some (lambda (entry)
                             (equal ts-mode (cdr entry)))
                           auto-mode-alist)))
            (unless (or used-in-major-mode-remap-alist used-in-auto-mode-alist)
              (warn "TS Mode not mapped: %s" ts-mode))))))

    :config
    (setopt
     treesit-font-lock-level 4
     treesit-extra-load-path `(,(expand-file-name "~/.config/emacs/var/tree-sitter"))
     major-mode-remap-alist '(
    			    (sh-mode . bash-ts-mode)
    			    (c++-mode . c++-ts-mode)
    			    (c-or-c++-mode . c-or-c++-ts-mode)
    			    (c-mode . c-ts-mode)
    			    (cmake-mode . cmake-ts-mode)
    			    (csharp-mode . csharp-ts-mode)
    			    (css-mode . css-ts-mode)
    			    (indent-bars-mode . indent-bars-ts-mode)
    			    (java-mode . java-ts-mode)
    			    (javascript-mode . js-ts-mode)
    			    (js-json-mode . json-ts-mode)
    			    (nim-mode . nim-ts-mode)
    			    (python-mode . python-ts-mode)
    			    (ruby-mode . ruby-ts-mode)
    			    (conf-toml-mode . toml-ts-mode)))
    (dolist (mode-assoc
    	   '(("\\(?:Dockerfile\\(?:\\..*\\)?\\|\\.[Dd]ockerfile\\)\\'"
    	      . dockerfile-ts-mode)
    	     ("/go\\.mod\\'" . go-mod-ts-mode)
    	     ("\\.go\\'" . go-ts-mode)
  	     ("\\.nix\\'" . nix-ts-mode)
  	     ("\\.rs\\'" . rust-ts-mode)
  	     ("\\.ts\\'" . typescript-ts-mode)
  	     ("\\.tsx\\'" . tsx-ts-mode)
  	     ("\\.ya?ml\\'" . yaml-ts-mode)))
      (add-to-list 'auto-mode-alist mode-assoc))


    (cloveynit/report-unused-ts-modes))
#+end_src
** TODO [#B] Spelling
* Programming Languages
** Nix
#+begin_src emacs-lisp :tangle yes
  (use-package nix-ts-mode
    :mode "\\.nix\\'")
#+end_src
* Version Control
** Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit)
#+end_src
** TODO [#C] Diff-HL
* Project Management
** TODO [#B] Project
Project is the in-built project management package.
#+begin_src emacs-lisp :tangle yes
  (transient-define-prefix cloveynit-project-dispatch ()
    "Transient for managing projects"
    [["Project"
      ("d" "Dired" project-dired)
      ]])
#+end_src
* Utilities
** Helpful
Improved help display.
#+begin_src emacs-lisp :tangle yes
  (use-package helpful
    :commands
    (helpful-callable
     helpful-function
     helpful-macro
     helpful-command
     helpful-key
     helpful-variable
     helpful-at-point)
    :init
    (transient-define-prefix cloveynit-helpful-dispatch ()
      "Transient for Help commands"
      ["Helpful"
       [("c" "Callable" helpful-callable)
        ("f" "Function" helpful-function)
        ("x" "Command" helpful-command)
        ("m" "Macro" helpful-macro)
        ("k" "Key" helpful-key)
        ("v" "Variable" helpful-variable)
        ("p" "At point" helpful-at-point)]]))

#+end_src
** TODO [#A] Dired
** TODO [#A] Ediff
* Custom Functions
